CREATE TABLE IF NOT EXISTS categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(50) NOT NULL,
    CONSTRAINT pk_categories PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS locations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    lat float NOT NULL,
    lon float NOT NULL,
    CONSTRAINT pk_locations PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR(254) NOT NULL,
    name VARCHAR(250) NOT NULL,
    CONSTRAINT pk_users PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    created timestamp NOT NULL,
    event_id integer NOT NULL,
    requester_id integer NOT NULL,
    status VARCHAR(64) NOT NULL,
    CONSTRAINT pk_requests PRIMARY KEY (id),
    CONSTRAINT fk_request FOREIGN KEY (requester_id) REFERENCES users (id)
);

CREATE TABLE IF NOT EXISTS events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    annotation VARCHAR(2000) NOT NULL,
    category_id integer NOT NULL,
    confirmed_requests bigint[] NOT NULL,
    created_on timestamp NOT NULL,
    description VARCHAR(7000) NOT NULL,
    event_date timestamp NOT NULL,
    initiator_id integer NOT NULL,
    location_id integer NOT NULL,
    paid bool NOT NULL,
    participant_limit integer NOT NULL DEFAULT 0,
    published_on timestamp,
    request_moderation bool NOT NULL DEFAULT true,
    state VARCHAR(64),
    title VARCHAR(250) NOT NULL,
    views integer,
    CONSTRAINT pk_events PRIMARY KEY (id),
    CONSTRAINT fk_category_event FOREIGN KEY (category_id) REFERENCES categories (id),
    CONSTRAINT fk_initiator_event FOREIGN KEY (initiator_id) REFERENCES users (id),
    CONSTRAINT fk_location_event FOREIGN KEY (location_id) REFERENCES locations (id)
);

CREATE TABLE IF NOT EXISTS compilations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    pinned bool NOT NULL,
    title VARCHAR(64) NOT NULL,
    CONSTRAINT pk_compilation PRIMARY KEY (id),
    CONSTRAINT uq_compilation_name UNIQUE (title)
);

CREATE TABLE IF NOT EXISTS compilation_events (
  compilation_id BIGINT,
  event_id BIGINT,
  CONSTRAINT pk_compilation_event PRIMARY KEY (compilation_id, event_id),
  CONSTRAINT fk_compilation_event_compilation FOREIGN KEY (compilation_id) REFERENCES compilations (id),
  CONSTRAINT fk_compilation_event_event FOREIGN KEY (event_id) REFERENCES events (id)
);